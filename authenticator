#!/usr/bin/env python
import hmac, base64, struct, hashlib, time

import getopt
import sys
import os

def get_options():
    options, remainder = getopt.getopt(sys.argv[1:], 's:i:h?', ['help',
                                                             'interval=',
                                                             'secret=',
                                                             ])
    return options

def usage():
    print ''
    print '  USAGE: ', os.path.basename(__file__), '[OPTIONS]'
    print '     -s, --secret      Your secret key.'
    print '     -i, --interval    The interval number.'
    print '     -h, --help        Shows this help message.'
    print ''
    print '     Get HMAC-based one-time password (HOTP) on the basis of given'
    print '     secret and interval number or get time-based one-time password'
    print '     (TOTP) on the basis of given secret and time.'

def get_hotp_token(secret, intervals_no):
    key = base64.b32decode(secret, True)
    msg = struct.pack(">Q", intervals_no)
    h = hmac.new(key, msg, hashlib.sha1).digest()
    o = ord(h[19]) & 15
    h = (struct.unpack(">I", h[o:o+4])[0] & 0x7fffffff) % 1000000
    return h

def get_totp_token(secret):
    return get_hotp_token(secret, intervals_no=int(time.time())//30)

def _main():
    SECRET = ''
    INTERVAL = -1
    for opt, arg in get_options():
        if opt in ('-h', '--help'):
            usage()
            sys.exit(2)
        elif opt in ('-s', '--secret'):
            SECRET = arg.replace(' ', '')
        elif opt in ('-i', '--interval'):
            INTERVAL = int(arg)
        else:
            usage()
            sys.exit(2)

    TOKEN = ''
    if (INTERVAL != -1):
        TOKEN = get_hotp_token(SECRET, INTERVAL)
    else:
        TOKEN = get_totp_token(SECRET)
    sys.stdout.write(str('YOUR TOKEN: ') + str(TOKEN))

if __name__ == '__main__':
    _main()
